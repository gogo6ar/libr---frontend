{"version":3,"sources":["webpack:///src/app/account/account-routing.module.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/layout.component.ts","webpack:///src/app/account/layout.component.html","webpack:///src/app/account/login.component.ts","webpack:///src/app/account/login.component.html","webpack:///src/app/account/register.component.ts","webpack:///src/app/account/register.component.html"],"names":["routes","path","component","children","AccountRoutingModule","forChild","imports","exports","AccountModule","declarations","LayoutComponent","router","accountService","userValue","navigate","templateUrl","LoginComponent","formBuilder","route","alertService","loading","submitted","form","group","email","password","required","returnUrl","snapshot","queryParams","clear","invalid","login","f","value","pipe","subscribe","data","error","errorMessage","controls","onSubmit","RegisterComponent","firstName","lastName","age","phone","minLength","confirmPass","validator","checkIfMatchingPasswords","passwordKey","passwordConfirmationKey","passwordInput","passwordConfirmationInput","setErrors","notEquivalent","register","success","keepAfterRouteChange","relativeTo"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'register', component: RegisterComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        AccountRoutingModule\r\n    ],\r\n    declarations: [\r\n        LayoutComponent,\r\n        LoginComponent,\r\n        RegisterComponent\r\n    ]\r\n})\r\nexport class AccountModule { }","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) {\r\n        // redirect to home if already logged in\r\n        if (this.accountService.userValue) {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n}","<div class=\"col-md-6 offset-md-3 mt-5\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    returnUrl: string;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            email: ['', Validators.email],\r\n            password: ['', Validators.required]\r\n        });\r\n\r\n        // get return url from route parameters or default to '/'\r\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.login(this.f.email.value, this.f.password.value)\r\n            .pipe(first())\r\n            .subscribe(\r\n                data => {\r\n                    this.router.navigate([this.returnUrl]);\r\n                },\r\n                error => {\r\n                    this.alertService.error(error.error.errorMessage);\r\n                    this.loading = false;\r\n                });\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <h4 class=\"card-header\">Login</h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-group\">\r\n                <label for=\"email\">Email</label>\r\n                <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n                <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Login\r\n                </button>\r\n                <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '@app/_services';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            email: ['', Validators.email],\r\n            age: ['', Validators.required],\r\n            phone: ['', Validators.required],\r\n            password: ['', [Validators.required, Validators.minLength(6)]],\r\n            confirmPass: ['', Validators.required]\r\n        }, {validator: this.checkIfMatchingPasswords('password', 'confirmPass')});\r\n    }\r\n\r\n  checkIfMatchingPasswords(passwordKey: string, passwordConfirmationKey: string) {\r\n    return (group: FormGroup) => {\r\n      const passwordInput = group.controls[passwordKey];\r\n      const passwordConfirmationInput = group.controls[passwordConfirmationKey];\r\n      if (passwordInput.value !== passwordConfirmationInput.value) {\r\n        return passwordConfirmationInput.setErrors({notEquivalent: true});\r\n      }\r\n      else {\r\n        return passwordConfirmationInput.setErrors(null);\r\n      }\r\n    };\r\n  }\r\n\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe(\r\n                data => {\r\n                    this.alertService.success('Registration successful', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error => {\r\n                    this.alertService.error(error.error.errorMessage);\r\n                    this.loading = false;\r\n                });\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <h4 class=\"card-header\">Register</h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-group\">\r\n                <label for=\"firstName\">First Name</label>\r\n                <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\r\n                <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"lastName\">Last Name</label>\r\n                <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\r\n                <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\r\n                </div>\r\n            </div>\r\n\r\n        <!--          My code      -->\r\n\r\n\r\n<!--          EMail-->\r\n            <div class=\"form-group\">\r\n                <label for=\"email\">Email</label>\r\n                <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n                <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n                </div>\r\n            </div>\r\n\r\n<!--          Age-->\r\n          <div class=\"form-group\">\r\n            <label for=\"age\">Age</label>\r\n            <input type=\"number\" formControlName=\"age\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.age.errors }\" />\r\n            <div *ngIf=\"submitted && f.age.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.age.errors.required\">Age is required</div>\r\n            </div>\r\n          </div>\r\n\r\n<!--          Telephone number-->\r\n          <div class=\"form-group\">\r\n            <label for=\"phone\">Telephone number</label>\r\n            <input type=\"text\" formControlName=\"phone\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.phone.errors }\" />\r\n            <div *ngIf=\"submitted && f.phone.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.phone.errors.required\">Telephone is required</div>\r\n            </div>\r\n          </div>\r\n\r\n<!--          My code      -->\r\n          <div class=\"form-group\">\r\n            <label for=\"password\">Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n              <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\r\n            </div>\r\n          </div>\r\n\r\n<!--       My code ---   Confirm password-->\r\n          <div class=\"form-group\">\r\n            <label for=\"confirmPass\">Confirm your password</label>\r\n              <input type=\"password\" formControlName=\"confirmPass\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPass.errors }\" />\r\n              <div *ngIf=\"submitted && f.confirmPass.errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f.confirmPass.hasError('checkIfMatchingPasswords')\">Passwords don't match</div>\r\n              </div>\r\n          </div>\r\n<!--          My code-->\r\n            <div class=\"form-group\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Register\r\n                </button>\r\n                <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n"]}